#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'active_support/core_ext'
require 'active_record'
require 'action_mailer'
require 'fileutils'
require 'daemon_spawn'
require 'sys/proctable'

%w(
  ../../lib
  ../../app
).each do |dir|
  libdir = File.expand_path(dir, __FILE__)
  $LOAD_PATH.unshift(libdir) unless $LOAD_PATH.include?(libdir)
end

class Dcc < DaemonSpawn::Base
  def self.find(options)
    recognized_daemons = super
    recognized_pids = recognized_daemons.map {|d| d.pid }

    unrecognized_pids = Sys::ProcTable.ps.select do |p|
      p.comm == 'ruby' && p.ppid == 1 &&
          p.cmdline =~ /#{File.basename __FILE__} start/ && !recognized_pids.include?(p.pid)
    end.map {|p| p.pid }

    base_pid_file = new(options).pid_file
    unrecognized_daemons = unrecognized_pids.map do |pid|
      pid_file = File.exist?(base_pid_file) ? "#{base_pid_file}.recovered_#{pid}" : base_pid_file
      File.write(pid_file, pid)
      new options.merge(pid_file: pid_file)
    end

    recognized_daemons + unrecognized_daemons
  end

  def start(args)
    File.umask(0022)
    config = YAML::load(File.read('config/worker.yml')).with_indifferent_access
    ActiveRecord::Base.establish_connection(
        YAML::load(File.read('config/database.yml'))[config[:environment]])

    require 'dcc/worker'
    require 'dcc/mailer'

    ActionMailer::Base.delivery_method = :sendmail
    ActionMailer::Base.sendmail_settings = {:arguments => ''}
    DCC::Mailer.default from: config[:email_sender], to: config[:admin_e_mail_address]

    ActiveRecord::Base.time_zone_aware_attributes = true
    ActiveRecord::Base.default_timezone = :utc

    # http://zerolith.com/mysql-server-has-gone-away-activerecord.html
    Thread.new {
      loop {
        sleep 30.minutes
        ActiveRecord::Base.verify_active_connections!
      }
    }.priority = -10

    DCC::Worker.new(config[:group_name], config[:memcache_servers], config).run
  end

  def stop
  end
end

working_dir = log_dir = nil
FileUtils.chdir("#{File.dirname(__FILE__)}/..") do
  working_dir = FileUtils.pwd
  FileUtils.mkdir_p(log_dir = "#{working_dir}/log")
  FileUtils.mkdir_p("#{working_dir}/tmp/pids")
end

Dcc.spawn!(log_file: "#{log_dir}/worker.log",
    application: 'worker', working_dir: working_dir, sync_log: true, timeout: 10)
